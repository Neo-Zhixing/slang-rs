/// Allows for generating documentation in a macro.
macro_rules! doc_comment {
    ($x:expr, $($tt:tt)*) => {
        #[doc = $x]
        $($tt)*
    };
}

/// Implementation details for `lifetime_wrapper_struct`.
macro_rules! lifetime_wrapper_struct_impl {
    ($wrapper_name:ident, $inner:ty) => {
        impl ::std::fmt::Debug for $wrapper_name<'_> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                f.debug_tuple(stringify!($wrapper_name))
                    .field(&self.inner)
                    .finish()
            }
        }

        /// Autogenerated by `lifetime_wrapper_struct`.
        impl<'a> $wrapper_name<'a> {
            /// Creates a wrapper from `inner`.
            #[inline]
            pub fn wrap(inner: $inner) -> Self {
                Self {
                    inner,
                    phantom: ::std::marker::PhantomData,
                }
            }

            /// Retreives the inner value.
            #[inline]
            pub fn get(&self) -> $inner {
                self.inner
            }
        }

        doc_comment! {
            concat!("Helper to call `", stringify!($wrapper_name), "::wrap(", stringify!($inner), ")`."),
            impl From<$inner> for $wrapper_name<'_> {
                fn from(inner: $inner) -> Self {
                    Self::wrap(inner)
                }
            }
        }
    };
}

/// Generate a wrapper struct with a lifetime specifier.
///
/// Use `$wrapper_name::wrap($inner)` and `$wrapper_name::get() -> $inner` to wrap and access the value.
macro_rules! lifetime_wrapper_struct {
    ($wrapper_name:ident, $inner:ty) => {
        doc_comment! {
            concat!("Wraps `", stringify!($inner), "` with a lifetime specifier."),
            pub struct $wrapper_name<'a> {
                inner: $inner,
                phantom: ::std::marker::PhantomData<&'a $inner>,
            }
            lifetime_wrapper_struct_impl!($wrapper_name, $inner);
        }
    };
}

/// `lifetime_wrapper_struct` for `Copy` types.
macro_rules! lifetime_wrapper_struct_copy {
    ($wrapper_name:ident, $inner:ty) => {
        doc_comment! {
            concat!("Wraps `", stringify!($inner), "` with a lifetime specifier."),
            #[derive(Copy, Clone, PartialEq, Eq, Hash)]
            pub struct $wrapper_name<'a> {
                inner: $inner,
                phantom: ::std::marker::PhantomData<&'a $inner>,
            }
            lifetime_wrapper_struct_impl!($wrapper_name, $inner);
        }
    };
}
